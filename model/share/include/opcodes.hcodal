/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file
 *  \author Benjamin Yang
 *  \date   15.04.2019
 *  \brief  instruction operation codes
 */

#ifndef OPCODES_HCODAL_HG
#define OPCODES_HCODAL_HG

// RV32I Base Integer Instruction Set, Version 2.1

// -------------------------------------------------------------
// Defines to break down extended opcodes
// -------------------------------------------------------------

#define FUNCT7(opc)     opc[16..10]
#define FUNCT3(opc)     opc[9..7]
#define OPCODE(opc)     opc[6..0]

// -------------------------------------------------------------
// Funct7 definitions per extended opcode
// -------------------------------------------------------------

#define FUNCT7_SLLI    (0b0000000)
#define FUNCT7_SRLI    (0b0000000)
#define FUNCT7_SRAI    (0b0100000)

 #define FUNCT7_ADD     (0b0000000)
  //#####################################################Phase 2#################################################################
  //Uncomment lines and fill in the required values
   //######################################################################################################################

#define FUNCT7_SLT     (0b0000000)
#define FUNCT7_SLTU    (0b0000000)
#define FUNCT7_AND     (0b0000000)
#define FUNCT7_OR      (0b0000000)
#define FUNCT7_XOR     (0b0000000)
#define FUNCT7_SLL     (0b0000000)
#define FUNCT7_SRL     (0b0000000)
#define FUNCT7_SUB     (0b0100000)
#define FUNCT7_SRA     (0b0100000)

// -------------------------------------------------------------
// Funct3 definitions per extended opcode
// -------------------------------------------------------------

#define FUNCT3_SLLI    (0b001)
#define FUNCT3_SRLI    (0b101)
#define FUNCT3_SRAI    (0b101)

#define FUNCT3_ADD     (0b000)
#define FUNCT3_SLT     (0b010)
#define FUNCT3_SLTU    (0b011)
#define FUNCT3_AND     (0b111)
#define FUNCT3_OR      (0b110)
#define FUNCT3_XOR     (0b100)
#define FUNCT3_SLL     (0b001)
#define FUNCT3_SRL     (0b101)
#define FUNCT3_SUB     (0b000)
#define FUNCT3_SRA     (0b101)

#define FUNCT3_ADDI    (0b000)
#define FUNCT3_SLTI    (0b010)
#define FUNCT3_SLTIU   (0b011)
#define FUNCT3_ANDI    (0b111)
#define FUNCT3_ORI     (0b110)
#define FUNCT3_XORI    (0b100)

#define FUNCT3_BEQ     (0b000)
#define FUNCT3_BNE     (0b001)
#define FUNCT3_BLT     (0b100)
#define FUNCT3_BLTU    (0b110)
#define FUNCT3_BGE     (0b101)
#define FUNCT3_BGEU    (0b111)

#define FUNCT3_LB      (0b000)
#define FUNCT3_LH      (0b001)
#define FUNCT3_LW      (0b010)
#define FUNCT3_LBU     (0b100)
#define FUNCT3_LHU     (0b101)

#define FUNCT3_SB      (0b000)
#define FUNCT3_SH      (0b001)
#define FUNCT3_SW      (0b010)

#define FUNCT3_JALR    (0b000)


#define FUNCT3_CSRRW   (0b001)
#define FUNCT3_CSRRS   (0b010)
#define FUNCT3_CSRRC   (0b011)
#define FUNCT3_CSRRWI  (0b101)
#define FUNCT3_CSRRSI  (0b110)
#define FUNCT3_CSRRCI  (0b111)

// U-TYPE Opcodes
// opcode (bits 0:6)
enum UTYPE_OPCODES : uint7 {
    UTYPE_LUI   = 0b0110111,
    UTYPE_AUIPC = 0b0010111 // assuming a different 7-bit opcode here; adjust as needed
};


// J-TYPE Opcodes
// opcode (bits 0:6)
enum JTYPE_OPCODES : uint7 {
    JTYPE_JAL   = 0b1101111
};

// B-Type Opcodes and associated func3 codes
// func3(bits 12:14) | opcode (bits 0:6)
enum BTYPE_OPCODES : uint10 {
    BTYPE_BEQ   = (FUNCT3_BEQ << 7) + 0b1100011,
 //#####################################################Phase 2#################################################################
  //Uncomment lines and fill in the required values
   //######################################################################################################################
    BTYPE_BNE   = (0b001 << 7) + 0b1100011,
    BTYPE_BLT   = (0b100 << 7) + 0b1100011,
    BTYPE_BGE   = (0b101 << 7) + 0b1100011,
    BTYPE_BLTU  = (0b110 << 7) + 0b1100011,
    BTYPE_BGEU  = (0b111 << 7) + 0b1100011,
};

// R-Type 2-argument Opcodes
// func7(bits(bits 25:31) | func3(bits 12:14) | opcode (bits 0:6)
enum RTYPE_OPCODES : uint17 {
    RTYPE_MASK  = 0b11101000000110011,  // rd = rs1 & ~rs2
    RTYPE_ADD   = (FUNCT7_ADD << 10) + (FUNCT3_ADD << 7) + 0b0110011,
    //#####################################################Phase 2#################################################################
  //Uncomment lines and fill in the required values
   //######################################################################################################################
    RTYPE_SUB   = (0b0100000 << 10) + (0b000 << 7) + 0b0110011,
    RTYPE_SLL   = (0b0000000 << 10) + (0b001 << 7) + 0b0110011,
    RTYPE_SLT   = (0b0000000 << 10) + (0b010 << 7) + 0b0110011,
    RTYPE_SLTU  = (0b0000000 << 10) + (0b011 << 7) + 0b0110011,
    RTYPE_XOR   = (0b0000000 << 10) + (0b100 << 7) + 0b0110011,
    RTYPE_SRL   = (0b0000000 << 10) + (0b101 << 7) + 0b0110011,
    RTYPE_SRA   = (0b0100000 << 10) + (0b101 << 7) + 0b0110011,
    RTYPE_OR    = (0b0000000 << 10) + (0b110 << 7) + 0b0110011,
    RTYPE_AND   = (0b0000000 << 10) + (0b111 << 7) + 0b0110011,
};

// I-Type Immediate Opcodes (format)
// func3(bits 12:14) | opcode (bits 0:6)
enum ITYPE_OPCODES : uint10 {
    ITYPE_ADDI  = (FUNCT3_ADDI << 7) + 0b0010011,
    //#####################################################Phase 2#################################################################
  //Uncomment lines and fill in the required values
   //######################################################################################################################
    ITYPE_SLTI  = (0b010 << 7) + 0b0010011,
    ITYPE_SLTIU = (0b011 << 7) + 0b0010011,
    ITYPE_XORI  = (0b100 << 7) + 0b0010011,
    ITYPE_ORI   = (0b110 << 7) + 0b0010011,
    ITYPE_ANDI  = (0b111 << 7) + 0b0010011,
    ITYPE_JALR  = (0b000 << 7) + 0b1100111,
    ITYPE_LB    = (0b000 << 7) + 0b0000011,
    ITYPE_LH    = (0b001 << 7) + 0b0000011,
    ITYPE_LW    = (0b010 << 7) + 0b0000011,
    ITYPE_LBU   = (0b100 << 7) + 0b0000011,
    ITYPE_LHU   = (0b101 << 7) + 0b0000011
};

// Immediate Shift Operations
// Specialized set of I-Type of instructions
// func7(bits(bits 25:31) | func3(bits 12:14) | opcode (bits 0:6)
// rd = 5-bit immediate, rd = rs1 >> imm5
//#####################################################Phase 2#################################################################
  //Uncomment lines and fill in the required values
   //######################################################################################################################
enum IMM_SHIFT_OPCODES : uint17 {
    IMM_SHIFT_SLLI = (0b0000000 << 10) + (0b001 << 7) + 0b0010011,  // FUNC7 is 0b0000000, FUNC3 is 0b001
    IMM_SHIFT_SRLI = (0b0000000 << 10) + (0b101 << 7) + 0b0010011,  // FUNC7 is 0b0000000, FUNC3 is 0b101
    IMM_SHIFT_SRAI = (0b0100000 << 10) + (0b101 << 7) + 0b0010011   // FUNC7 is 0b0100000, FUNC3 is 0b101
};


// S-Type Opcodes and associated func3 codes
// func3(bits 12:14) | opcode (bits 0:6)
//#####################################################Phase 2#################################################################
  //Uncomment lines and fill in the required values
   //######################################################################################################################
enum STYPE_OPCODES : uint10 {
    STYPE_SB = (0b000 << 7) + 0b0100011,  // FUNC3 is 0b000, OPCODE is 0b0100011
    STYPE_SH = (0b001 << 7) + 0b0100011,  // FUNC3 is 0b001, OPCODE is 0b0100011
    STYPE_SW = (0b010 << 7) + 0b0100011   // FUNC3 is 0b010, OPCODE is 0b0100011
};


// Miscellaneous Opcodes and associated func3 codes
enum MISC10_OPCODES : uint10 {
    MISC_OPCODE_FENCE    = 0b0000001111
};

enum MISC32_OPCODES : uint32 {
    MISC_OPCODE_ECALL    = 0b00000000000000000000000001110011,
    MISC_OPCODE_EBREAK   = 0b00000000001000000000000001110011
};


#if defined(OPTION_CSR_ENABLED)

enum CSR_OPCODES : uint10 {
    CSR_CSRRW   = 0b0011110011,
    CSR_CSRRS   = 0b0101110011,
    CSR_CSRRC   = 0b0111110011,
    CSR_CSRRWI  = 0b1011110011,
    CSR_CSRRSI  = 0b1101110011,
    CSR_CSRRCI  = 0b1111110011
};
#endif

// J-TYPE Opcodes used for Codasip Simulator and not a apart of RISCV instruction set
// opcode (bits 0:6)
enum SIMULATION_OPCODES : uint7 {
    JTYPE_HALT      = 0b0111111,
    JTYPE_SYSCALL   = 0b1011111
};

#endif