/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file
 *  \author Codasip
 *  \date   15.04.2019
 *  \brief  instruction operation codes
 */

#ifndef OPCODES_HCODAL_HG
#define OPCODES_HCODAL_HG

// RV32I Base Integer Instruction Set, Version 2.1

// -------------------------------------------------------------
// Defines to break down extended opcodes
// -------------------------------------------------------------

#define FUNCT7(opc)     opc[16..10]
#define FUNCT3(opc)     opc[9..7]
#define OPCODE(opc)     opc[6..0]

// -------------------------------------------------------------
// Funct7 definitions per extended opcode
// -------------------------------------------------------------

#define FUNCT7_SLLI    (0b0000000)
#define FUNCT7_SRLI    (0b0000000)
#define FUNCT7_SRAI    (0b0100000)

 #define FUNCT7_ADD     (0b0000000)
  //#####################################################Phase 2#################################################################
  //Uncomment lines and fill in the required values
   //######################################################################################################################

// #define FUNCT7_SLT     (//enter funct7 in binary here)
// #define FUNCT7_SLTU    (//enter funct7 in binary here)
// #define FUNCT7_AND     (//enter funct7 in binary here)
// #define FUNCT7_OR      (//enter funct7 in binary here)
// #define FUNCT7_XOR     (//enter funct7 in binary here)
// #define FUNCT7_SLL     (//enter funct7 in binary here)
// #define FUNCT7_SRL     (//enter funct7 in binary here)
// #define FUNCT7_SUB     (//enter funct7 in binary here)
// #define FUNCT7_SRA     (//enter funct7 in binary here)

// -------------------------------------------------------------
// Funct3 definitions per extended opcode
// -------------------------------------------------------------

// #define FUNCT3_SLLI    (//enter funct3 in binary here)
// #define FUNCT3_SRLI    (//enter funct3 in binary here)
// #define FUNCT3_SRAI    (//enter funct3 in binary here)

#define FUNCT3_ADD     (0b000)
// #define FUNCT3_SLT     (//enter funct3 in binary here)
// #define FUNCT3_SLTU    (//enter funct3 in binary here)
// #define FUNCT3_AND     (//enter funct3 in binary here)
// #define FUNCT3_OR      (//enter funct3 in binary here)
// #define FUNCT3_XOR     (//enter funct3 in binary here)
// #define FUNCT3_SLL     (//enter funct3 in binary here)
// #define FUNCT3_SRL     (//enter funct3 in binary here)
// #define FUNCT3_SUB     (//enter funct3 in binary here)
// #define FUNCT3_SRA     (//enter funct3 in binary here)

#define FUNCT3_ADDI    (0b000)
// #define FUNCT3_SLTI    (//enter funct3 in binary here)
// #define FUNCT3_SLTIU   (//enter funct3 in binary here
// #define FUNCT3_ANDI    (//enter funct3 in binary here)
// #define FUNCT3_ORI     (//enter funct3 in binary here)
// #define FUNCT3_XORI    (//enter funct3 in binary here)

 #define FUNCT3_BEQ     (0b000)
// #define FUNCT3_BNE     (//enter funct3 in binary here)
// #define FUNCT3_BLT     (//enter funct3 in binary here)
// #define FUNCT3_BLTU    (//enter funct3 in binary here)
//  #define FUNCT3_BGE     (//enter funct3 in binary here)
//  #define FUNCT3_BGEU    (//enter funct3 in binary here)

// #define FUNCT3_LB      (//enter funct3 in binary here)
// #define FUNCT3_LH      (//enter funct3 in binary here)
// #define FUNCT3_LW      (//enter funct3 in binary here)
// #define FUNCT3_LBU     (//enter funct3 in binary here)
// #define FUNCT3_LHU     (//enter funct3 in binary here)

// #define FUNCT3_SB      (//enter funct3 in binary here)
// #define FUNCT3_SH      (//enter funct3 in binary here)
// #define FUNCT3_SW      (//enter funct3 in binary here)

//  #define FUNCT3_JALR    (//enter funct3 in binary here)


#define FUNCT3_CSRRW   (0b001)
#define FUNCT3_CSRRS   (0b010)
#define FUNCT3_CSRRC   (0b011)
#define FUNCT3_CSRRWI  (0b101)
#define FUNCT3_CSRRSI  (0b110)
#define FUNCT3_CSRRCI  (0b111)

// U-TYPE Opcodes
// opcode (bits 0:6)
enum UTYPE_OPCODES : uint7 {
    UTYPE_LUI   = 0b0110111,
    // UTYPE_AUIPC = //enter opcode in binary here
};

// J-TYPE Opcodes
// opcode (bits 0:6)
enum JTYPE_OPCODES : uint7 {
    JTYPE_JAL   = 0b1101111
};

// B-Type Opcodes and associated func3 codes
// func3(bits 12:14) | opcode (bits 0:6)
enum BTYPE_OPCODES : uint10 {
    BTYPE_BEQ   = (FUNCT3_BEQ << 7) + 0b1100011,
 //#####################################################Phase 2#################################################################
  //Uncomment lines and fill in the required values
   //######################################################################################################################
    // BTYPE_BNE   = //enter concatenation of func3 and opcode in binary here
    // BTYPE_BLT   = //enter concatenation of func3 and opcode in binary here
    // BTYPE_BGE   = //enter concatenation of func3 and opcode in binary here
    // BTYPE_BLTU  = //enter concatenation of func3 and opcode in binary here
    // BTYPE_BGEU  = //enter concatenation of func3 and opcode in binary here
};

// R-Type 2-argument Opcodes
// func7(bits(bits 25:31) | func3(bits 12:14) | opcode (bits 0:6)
enum RTYPE_OPCODES : uint17 {
    RTYPE_MASK  = 0b11101000000110011,  // rd = rs1 & ~rs2
    RTYPE_ADD   = (FUNCT7_ADD << 10) + (FUNCT3_ADD << 7) + 0b0110011,
    //#####################################################Phase 2#################################################################
  //Uncomment lines and fill in the required values
   //######################################################################################################################
    // RTYPE_SUB   = //enter concatenation of func7, func3 and opcode in binary here,
    // RTYPE_SLL   =  //enter concatenation of func7, func3 and opcode in binary here,
    // RTYPE_SLT   =  //enter concatenation of func7, func3 and opcode in binary here,
    // RTYPE_SLTU  =  //enter concatenation of func7, func3 and opcode in binary here,
    // RTYPE_XOR   =  //enter concatenation of func7, func3 and opcode in binary here,,
    // RTYPE_SRL   =  //enter concatenation of func7, func3 and opcode in binary here,,
    // RTYPE_SRA   =  //enter concatenation of func7, func3 and opcode in binary here,,
    // RTYPE_OR    =  //enter concatenation of func7, func3 and opcode in binary here,,
    // RTYPE_AND   =  //enter concatenation of func7, func3 and opcode in binary here,
};

// I-Type Immediate Opcodes (format)
// func3(bits 12:14) | opcode (bits 0:6)
enum ITYPE_OPCODES : uint10 {
    ITYPE_ADDI  = (FUNCT3_ADDI << 7) + 0b0010011,
    //#####################################################Phase 2#################################################################
  //Uncomment lines and fill in the required values
   //######################################################################################################################
    // ITYPE_SLTI  = //enter concatenation of func3 and opcode in binary here,
    // ITYPE_SLTIU = //enter concatenation of func3 and opcode in binary here,
    // ITYPE_XORI  = //enter concatenation of func3 and opcode in binary here,
    // ITYPE_ORI   = //enter concatenation of func3 and opcode in binary here,
    // ITYPE_ANDI  = //enter concatenation of func3 and opcode in binary here,

    //  ITYPE_JALR  = (//enter concatenation of func3 and opcode in binary here,
    // ITYPE_LB    = //enter concatenation of func3 and opcode in binary here,
    // ITYPE_LH    = //enter concatenation of func3 and opcode in binary here,
    // ITYPE_LW    = //enter concatenation of func3 and opcode in binary here,
    // ITYPE_LBU   = //enter concatenation of func3 and opcode in binary here,
    // ITYPE_LHU   = //enter concatenation of func3 and opcode in binary here
};

// Immediate Shift Operations
// Specialized set of I-Type of instructions
// func7(bits(bits 25:31) | func3(bits 12:14) | opcode (bits 0:6)
// rd = 5-bit immediate, rd = rs1 >> imm5
//#####################################################Phase 2#################################################################
  //Uncomment lines and fill in the required values
   //######################################################################################################################
// enum IMM_SHIFT_OPCODES : uint17 {
    // IMM_SHIFT_SLLI  =  //enter concatenation of func7, func3 and opcode in binary here, 
    // IMM_SHIFT_SRLI  =  //enter concatenation of func7, func3 and opcode in binary here,
    // IMM_SHIFT_SRAI  =  //enter concatenation of func7, func3 and opcode in binary here,
// };


// S-Type Opcodes and associated func3 codes
// func3(bits 12:14) | opcode (bits 0:6)
//#####################################################Phase 2#################################################################
  //Uncomment lines and fill in the required values
   //######################################################################################################################
// enum STYPE_OPCODES : uint10 {
    // STYPE_SB    = //enter concatenation of func3 and opcode in binary here,
    // STYPE_SH    = //enter concatenation of func3 and opcode in binary here,
    // STYPE_SW    = //enter concatenation of func3 and opcode in binary here
// };

// Miscellaneous Opcodes and associated func3 codes
enum MISC10_OPCODES : uint10 {
    MISC_OPCODE_FENCE    = 0b0000001111
};

enum MISC32_OPCODES : uint32 {
    MISC_OPCODE_ECALL    = 0b00000000000000000000000001110011,
    MISC_OPCODE_EBREAK   = 0b00000000001000000000000001110011
};


#if defined(OPTION_CSR_ENABLED)

enum CSR_OPCODES : uint10 {
    CSR_CSRRW   = 0b0011110011,
    CSR_CSRRS   = 0b0101110011,
    CSR_CSRRC   = 0b0111110011,
    CSR_CSRRWI  = 0b1011110011,
    CSR_CSRRSI  = 0b1101110011,
    CSR_CSRRCI  = 0b1111110011
};
#endif

// J-TYPE Opcodes used for Codasip Simulator and not a apart of RISCV instruction set
// opcode (bits 0:6)
enum SIMULATION_OPCODES : uint7 {
    JTYPE_HALT      = 0b0111111,
    JTYPE_SYSCALL   = 0b1011111
};

#endif
